/*
 * Copyright (C) 2013 Peter Withers
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.bambooradical.scratchbuilt.serialisers;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlValue;

/**
 * Created on : Jun 23, 2013, 5:31:44 PM
 *
 * @author Peter Withers <peter-ghc@bambooradical.com>
 */
public class YasimFuselage {

    private String comment = null;
    private double x;
    private double y;
    private double z;
    private double length;
    private double startWidth;
    private double endWidth;

    public YasimFuselage() {
    }

    public YasimFuselage(String comment, double x, double y, double z, double length, double startWidth, double endWidth) {
        this.comment = comment;
        this.x = x;
        this.y = y;
        this.z = z;
        this.length = length;
        this.startWidth = startWidth;
        this.endWidth = endWidth;
    }
    // ax,ay,az: One end of the tube (typically the front)

    @XmlAttribute(name = "ax")
    public double getAX() {
        return x;
    }

    @XmlAttribute(name = "ay")
    public double getAY() {
        return y;
    }

    @XmlAttribute(name = "az")
    public double getAZ() {
        return z;
    }
    // bx,by,bz: The other ("back") end.

    @XmlAttribute(name = "bx")
    public double getBX() {
        return x + length;
    }

    @XmlAttribute(name = "by")
    public double getBY() {
        return y;
    }

    @XmlAttribute(name = "bz")
    public double getBZ() {
        return z;
    }

    // width: The width of the tube, in metres.
    @XmlAttribute(name = "width")
    public double getWidth() {
        return startWidth > endWidth ? startWidth : endWidth;
    }
    // taper: The approximate radius at the "tips" of the fuselage expressed as a fraction (0-1) of the width value.

    @XmlAttribute(name = "taper")
    public double getTaper() {
        return startWidth < endWidth ? startWidth / endWidth : endWidth / startWidth;
    }
    // midpoint: The location of the widest part of the fuselage, expressed as a fraction of the distance between A and B.

    @XmlAttribute(name = "midpoint")
    public double getMidpoint() {
        return startWidth > endWidth ? 1 : 0;
    }
    // idrag: Multiplier for the "induced drag" generated by this object. Default is one. With idrag=0 the fuselage generates only drag.
    // cx,cy,cz: Factors for the generated drag in the fuselages "local coordinate system" with x pointing from end to front, z perpendicular to x with y=0 in the aircraft coordinate system. E.g. for a fuselage of a height of 2 times them width you can define cy=2 and (due to the doubled front surface) cx=2.

    @XmlValue
    public String getComment() {
        if (comment == null) {
            return null;
        } else {
            return "<!-- " + comment + " -->";
        }
    }
}
